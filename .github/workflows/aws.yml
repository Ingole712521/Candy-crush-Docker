name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

jobs:
  build_and_push_image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t candy .

      - name: Push Docker image to DockerHub
        run: |
          docker tag candy:latest ${{ secrets.DOCKER_USERNAME }}/candy:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/candy:latest

  ECR_ECS_Deployment:
    name: Build Docker Image And Push To ECR And Deploy To ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup AWS ECR Details
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR Repository if Not Exists
        id: create-repo
        run: |
          REPO_NAME="myrepo"
          if ! aws ecr describe-repositories --region ${{ secrets.AWS_REGION }} --repository-names $REPO_NAME; then
            aws ecr create-repository --repository-name $REPO_NAME --region ${{ secrets.AWS_REGION }}
          fi

      - name: Build and push the tagged docker image to Amazon ECR
        id: containerImage
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: myrepo
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.containerImage.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
